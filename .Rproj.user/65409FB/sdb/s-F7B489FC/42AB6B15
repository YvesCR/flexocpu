{
    "collab_server" : "",
    "contents" : "#' gethowel\n#'\n#' Get the details of a patient\n#'\n#' @export\n#'\ngethowel <- function(id) {\n  # id <- 5\n  # howell <- read.table(\"../Howel1.txt\", header = T, sep = \";\")\n  # save(howell, file= \"data/howell.Rdata\")\n\n  #  load(file= \"D:/websites/YCR/opencputest/data/howell.Rda\") # howell\n  # howell should in the package opencputest and could be called like that\n\n  data(\"howell\")\n\n  howell$id <- 1:nrow(howell)\n\n  if(id <= nrow(howell)){\n    res <- howell[id, ]\n    res$height <- round(res$height, digits = 0)\n    res$weight <- round(res$weight, digits = 1)\n  } else stop(\"Out of range\")\n\n  return(jsonlite::toJSON(res))\n\n}\n#' plotind\n#'\n#' plot the patient over the average\n#'\n#' @export\n#'\nplotind <- function(id = 1) {\n  # id <- 5\n  # howell <- read.table(\"../Howel1.txt\", header = T, sep = \";\")\n  # save(howell, file= \"data/howell.Rdata\")\n\n  multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {\n    library(grid)\n\n    # Make a list from the ... arguments and plotlist\n    plots <- c(list(...), plotlist)\n\n    numPlots = length(plots)\n\n    # If layout is NULL, then use 'cols' to determine layout\n    if (is.null(layout)) {\n      # Make the panel\n      # ncol: Number of columns of plots\n      # nrow: Number of rows needed, calculated from # of cols\n      layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),\n                       ncol = cols, nrow = ceiling(numPlots/cols))\n    }\n\n    if (numPlots==1) {\n      print(plots[[1]])\n\n    } else {\n      # Set up the page\n      grid.newpage()\n      pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))\n\n      # Make each plot, in the correct location\n      for (i in 1:numPlots) {\n        # Get the i,j matrix positions of the regions that contain this subplot\n        matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))\n\n        print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,\n                                        layout.pos.col = matchidx$col))\n      }\n    }\n  }\n\n  data(\"howell\")\n\n  howell$age.band <- cut(howell$age, breaks = c(15, 20, 30, 40))\n  howell$id <- 1:nrow(howell)\n\n  if(id <= nrow(howell)){\n\n    plot.gg0 <- ggplot2::ggplot(data = howell, ggplot2::aes(y = height, x = weight)) +\n      ggplot2::geom_smooth() +\n      ggplot2::geom_point(data = howell[id, ], size = 5)\n\n    plot.gg1 <- ggplot2::ggplot(data = howell, ggplot2::aes(y = weight, x = age)) +\n      ggplot2::geom_smooth() +\n      ggplot2::geom_point(data = howell[id, ], size = 5)\n\n    plot.gg2 <- ggplot2::ggplot(data = howell, ggplot2::aes(y = height, x = age)) +\n      ggplot2::geom_smooth() +\n      ggplot2::geom_point(data = howell[id, ], size = 5)\n\n    plot.gg <- multiplot(plot.gg0, plot.gg1, plot.gg2, cols=3)\n\n  } else stop(\"Out of range\")\n\n  return(plot.gg)\n\n}\n#' plot.dt\n#'\n#' return the html of htmlwidget, method 1\n#'\n#' @export\n#'\nplot.dt <- function(id = 1){\n  # id <- 5\n  # howell <- read.table(\"../Howel1.txt\", header = T, sep = \";\")\n  # save(howell, file= \"data/howell.Rdata\")\n\n  data(\"howell\")\n\n  my.tab <- DT::datatable(howell, options = list(dom = 'tip')\n                  , fillContainer=T\n                  , width = '1020px'\n                  , height = '350px')\n\n  htmlwidgets::saveWidget(my.tab, \"mytab.html\", selfcontained = FALSE)\n\n}\n#' plot.html\n#'\n#' return the html of htmlwidget, method 2\n#'\n#' @export\n#'\nplot.html <- function(id = 1){\n  # id <- 5\n  # howell <- read.table(\"../Howel1.txt\", header = T, sep = \";\")\n  # save(howell, file= \"data/howell.Rdata\")\n\n  data(\"howell\")\n\n  my.tab <- DT::datatable(howell, options = list(dom = 'tip')\n                          , fillContainer=T\n                          , width = '1020px'\n                          , height = '350px')\n\n    out <- unclass(htmlwidgets:::toHTML(my.tab))\n    print(paste(out[[1]], out[[2]], sep=\"\\n\"))\n    return(paste(out[[1]], out[[2]], sep=\"\\n\"))\n}\n#' leaflet widget\n#'\n#'\n#' @export\nmake_map <- function(title = \"This is a test\"){\n  m <- leaflet::leaflet()\n  m <- leaflet::addTiles(m)\n  m <- leaflet::addMarkers(m, lng = -0.132065, lat = 51.516900, popup = title)\n  htmlwidgets::saveWidget(m, \"mymap.html\", selfcontained = FALSE)\n}\n",
    "created" : 1477938890733.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1560641029",
    "id" : "42AB6B15",
    "lastKnownWriteTime" : 1477939574,
    "last_content_update" : 1477939574275,
    "path" : "~/GitHub/flexocpu/R/opencputest.R",
    "project_path" : "R/opencputest.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}