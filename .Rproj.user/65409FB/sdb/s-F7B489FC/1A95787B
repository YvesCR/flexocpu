{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Dashboarding with flexdashboard and opencpu\"\nauthor: \"YCR\"\ndate: \"31 October 2016\"\noutput: html_document\n---\n\n## Abstract\n\nIn this article, I present an exemple of mix use of opencpu and flexdashboard. \nOpencpu is used as the back end of the dashboard and flexdashboard as the front end.\n\nThe originality, here, lie in the fact that I code the js to call the api in the Rmd. This allows me to concentrate all the front-end code in one script, the rmd.\n\nThe process to create the dashboard is the following:\n\n- Create the R package, the back-end functions\n- Create a flexdashboard containing the html structure and js code\n\nA script is used to render the flexdashboard, build the package and serve the updated dashboard.\n\n## Opencpu\n\n[Opencpu](opencpu.org) is a system that provides a reliable and interoperable HTTP API for data analysis based on R. It allows to easily implement R in a production environment through the use of an API to serve R scripts structured as a package.\n\nAt first, it is a complex subject, as the concept of API needs to be understood, which is not a native knowledge for a lot of analysts.\n\nTo ease up beginners, I advice to read these two resources, which describe opencpu case studies:\n\n* [Personnalised results with opencpu](https://medium.com/@TheLaddersEng/data-scientists-toolbox-for-data-infrastructure-i-e25391f145a3#.dg3csfgf1)\n* [Prefetch url with opencpu](https://earlconf.com/london/speaker/hxcuw)\n\nTo summarize, opencpu allows to run R scripts on demand.\n\nThere is alternatives to opencpu.\nAt the last EARL conference, two speakers were using different methods:\n\n* [Real-time scoring in marketplace](https://earlconf.com/london/speaker/6zbc3)\n* [Real-time predictive analytic in medical claim processing](https://earlconf.com/london/speaker/8oj31)\n\nIn the first case, an API had been built in Ruby to wrap R code. In the second case, a R script is called in batch by a script in java.\n\nThe main caveat of opencpu is the security: I am not aware of an easy option to use https instead of http. I use openCPU behind a corporate firewall so I don't have to worry too much about how secure it can be.\n\n## Flexdashboard and shiny\n\n[Flexdashboard](http://rmarkdown.rstudio.com/flexdashboard/) is a package by Rstudio which allows to do a dashboard with Rmarkdown.\n\nYou can create a standalone document where the interactivity is limited at the htmlwidget packages level.\n\nYou can, for exemple, include a leaflet map, a D3 chart or a plotly chart.\n\nFor more complex customization, the traditional way is to use shiny as the back-end to create fully customized dashboard; sometimes a good alternative to Tableau or BO.\n\n## Using opencpu with flexdashboard\n\n### Creation of the stack\n\nTo create the dashboard, the first thing to do is to code the back-end: the R package which is served by opencpu. The front-end come in second place.\n\nThe main reference for that is the book [R packages](r-pkgs.had.co.nz) by Hadley Wickham.\n\nTo test your package, the easiest way is to use the [OpenCPU API explorer](https://public.opencpu.org/ocpu/test/).\nYou can enter your parameter and get the result the way the API is returning it.\n\nIn my exemple, functions return either a json, a R plot or an html file.\n\nFor the front-end, I create two scripts:\n\n- A script \"Index.Rmd\", which content the flexdashboard structure of my dashboard.\n    * The script need to be rendered as \"Index.html\" in the inst/www folder.\n- A script \"setup_package.R\" which contain the steps to update the package.\n    * The name can be different.\n\nThe Rmd script use the flexdashboard structure but most of the content is js code to get the API content or js code to produce the input buttons. It is a mix of html, R and js code.\n\n### Update the dashboard\n\nWhen I have finished to modified my code, I use the script \"setup_package.R\" to update the dashboard. The process contain 4 steps:\n\n* Render the Rmarkdown file \"Index.Rmd\" to \"Index.html\" in inst/www\n* Build the package\n* Install the package\n* Open the browser at the URL of the dashboard.\n\nIn addition, the first time that the dashboard is updated, the opencpu server need to be started.\n\nOn my exemple, the whole process take less than 10 sec, which is enough to keep my attention focused on the task.\n\nAll the code could be found on my github account, [here](https://github.com/YvesCR/flexocpu). Feel free to comment.\n",
    "created" : 1477939904357.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "911155949",
    "id" : "1A95787B",
    "lastKnownWriteTime" : 1477947380,
    "last_content_update" : 1477947380356,
    "path" : "~/GitHub/flexocpu/article/2016-10-31-Dashboarding.Rmd",
    "project_path" : "article/2016-10-31-Dashboarding.Rmd",
    "properties" : {
        "ignored_words" : "js,opencpu,flexdashboard,exemple,Opencpu,api,Rmd,rmd,interoperable,EARl,https,http,Rstudio,Rmarkdown,htmlwidget,plotly,Hadley,Wickham,json,www\n"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}